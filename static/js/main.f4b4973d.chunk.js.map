{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["liff","window","axios","defaults","baseURL","headers","post","App","useState","value","setValue","isLogin","setIsLogin","useEffect","init","liffId","process","then","isLoggedIn","className","Button","variant","color","onClick","method","url","data","login","disabled","scanCode","result","catch","alert","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"uRAOMA,EAAOC,OAAOD,KACpBE,IAAMC,SAASC,QAAU,+CACzBF,IAAMC,SAASE,QAAQC,KAAK,gBAAkB,iCAC9CJ,IAAMC,SAASE,QAAQC,KAAK,+BAAiC,IAE7D,IA6DeC,EA7DO,WAAO,IAAD,EACEC,mBAAiB,IADnB,mBACjBC,EADiB,KACVC,EADU,OAEUF,oBAAkB,GAF5B,mBAEbG,EAFa,KAEJC,EAFI,KAIpBC,qBAAU,WACFb,EAAKc,KAAK,CAAEC,OAAQC,wBAA2CC,MAAK,WAC5DL,EAAWZ,EAAKkB,mBAErB,IAoCf,OACQ,yBAAKC,UAAU,OACf,yBAAKA,UAAU,WAAWV,GAC1B,yBAAKU,UAAU,eACf,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,WArCzDvB,EAAKc,KAAK,CAAEC,OAAQC,wBAA2CC,MAAK,WAChEf,IAAM,CAChBsB,OAAQ,OACRC,IAAK,sDACCC,KAAM,GACNrB,QAAQ,CAAC,8BAA8B,OAG/BL,EAAK2B,QACLf,EAAWZ,EAAKkB,kBA4BgDU,SAAUjB,GAA9E,aAIA,yBAAKQ,UAAU,YACf,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAAS,WA5B3DvB,EAAKc,KAAK,CAAEC,OAAQC,wBAA2CC,MAAK,WAC5D,IACAf,IAAM,CACtBsB,OAAQ,OACRC,IAAK,sDACLC,KAAM,GACErB,QAAQ,CAAC,8BAA8B,OAI/BL,EAAK6B,WACJZ,MAAK,SAAAa,GAAM,OAAIpB,EAASoB,EAAOrB,UAC/BsB,OAAM,kBAAMC,MAAM,qBACjB,SACFA,MAAM,8BAc6DJ,UAAWjB,GAAlF,qBCrDQsB,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdd,OAAM,SAAAe,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4b4973d.chunk.js","sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport './App.css'\nimport { buildReplyText } from 'line-message-builder'\nimport axios from 'axios';\n\n\nconst liff = window.liff\naxios.defaults.baseURL = 'https://mighty-anchorage-01609.herokuapp.com';\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\nconst App: React.FC = () => {\n    const [value, setValue] = useState<string>('')\n        const [isLogin, setIsLogin] = useState<boolean>(false)\n\n        useEffect(() => {\n                liff.init({ liffId: process.env.REACT_APP_LIFF_ID as string }).then(() => {\n                        setIsLogin(liff.isLoggedIn())\n                        })\n                }, [])\n\n    const login = () => {\n        liff.init({ liffId: process.env.REACT_APP_LIFF_ID as string }).then(() => {\n            axios({\n  method: 'post',\n  url: 'https://mighty-anchorage-01609.herokuapp.com/remind',\n        data: {},\n        headers:{\"Access-Control-Allow-Origin\":\"*\"}\n    });\n\n                liff.login()\n                setIsLogin(liff.isLoggedIn())\n                })\n    }\n\n    const openQR = () => {\n        liff.init({ liffId: process.env.REACT_APP_LIFF_ID as string }).then(() => {\n                try {\n                axios({\nmethod: 'post',\nurl: 'https://mighty-anchorage-01609.herokuapp.com/remind',\ndata: {},\n        headers:{\"Access-Control-Allow-Origin\":\"*\"}\n\n});\n\n                liff.scanCode()\n                .then(result => setValue(result.value!))\n                .catch(() => alert('cannot read QR'))\n                } catch {\n                alert('cannot open QR camera')\n                }\n                })\n    }\n\n    return (\n            <div className=\"App\">\n            <div className=\"qrValue\">{value}</div>\n            <div className=\"loginButton\">\n            <Button variant=\"contained\" color=\"primary\" onClick={() => login()} disabled={isLogin}>\n            Login!!!\n            </Button>\n            </div>\n            <div className=\"qrButton\">\n            <Button variant=\"contained\" color=\"secondary\" onClick={() => openQR()} disabled={!isLogin}>\n            Open QR camera\n            </Button>\n            </div>\n            </div>\n           );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}